<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0">
  <meta http-equiv="ScreenOrientation" content="autoRotate:disabled">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="screen-orientation" content="portrait">
  <meta name="x5-orientation" content="portrait">
  <title>企业微信应用 - 后台管理</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      padding-top: 20px;
      padding-bottom: 40px;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 1200px;
    }
    .user-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      object-fit: cover;
      font-size: 14px;
    }
    .login-status {
      padding: 8px 0;
      background-color: #f8f9fa;
      margin-bottom: 20px;
      border-radius: 5px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      font-size: 0.9rem;
    }
    .admin-header {
      margin-bottom: 1.5rem;
    }
    .table td, .table th {
      word-break: break-word;
      word-wrap: break-word;
      white-space: normal;
      vertical-align: middle;
      font-size: 0.9rem;
      padding: 0.4rem 0.6rem;
      line-height: 1.3;
      height: 60px;
    }
    
    .table tbody tr {
      height: 60px;
    }
    /* 用户列样式 - 统一宽度设置 */
    .table th:nth-child(1),
    .table td:nth-child(1) {
      width: 120px;
      min-width: 120px;
      text-align: left;
    }
    /* 岗位列样式 - 新增列 */
    .table th:nth-child(2),
    .table td:nth-child(2) {
      width: 100px;
      min-width: 100px;
      text-align: center;
    }
    /* 时间列样式 - 允许折行显示 */
    .table th:nth-child(3),
    .table td:nth-child(3) {
      width: 120px;
      min-width: 120px;
      text-align: center;
    }
    /* 订单号列样式 - 增加宽度 */
    .table th:nth-child(4),
    .table td:nth-child(4) {
      width: 140px;
      min-width: 140px;
      text-align: center;
    }
    /* 数量列样式 - 减小宽度 */
    .table th:nth-child(5),
    .table td:nth-child(5) {
      white-space: nowrap;
      width: 60px;
      min-width: 60px;
      text-align: center;
    }
    /* 状态列样式 - 美化显示 */
    .table th:nth-child(6),
    .table td:nth-child(6) {
      white-space: nowrap;
      width: 80px;
      min-width: 80px;
      text-align: center;
    }
    /* 时间显示样式 */
    .time-display {
      line-height: 1.2;
    }
    .time-date {
      font-weight: 500;
      color: #333;
    }
    .time-clock {
      font-size: 0.85em;
      color: #666;
    }
    /* 状态徽章美化 */
    .badge.rounded-pill {
      font-size: 0.75rem;
      font-weight: 500;
      letter-spacing: 0.3px;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
      transition: all 0.2s ease;
      padding: 0.25rem 0.6rem;
    }
    .badge.rounded-pill:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }
    /* 表格排序样式 */
     .sortable {
       cursor: pointer;
       user-select: none;
       position: relative;
       transition: all 0.2s ease;
       padding-right: 25px !important; /* 为排序图标预留空间 */
     }
     .sortable:hover {
       background-color: #e3f2fd;
       color: #1976d2;
     }
     .sortable.asc,
     .sortable.desc {
       background-color: #bbdefb;
       color: #0d47a1;
       font-weight: 600;
     }
     .sortable::after {
       content: '\2195';
       position: absolute;
       right: 8px;
       top: 50%;
       transform: translateY(-50%);
       opacity: 0.6;
       font-size: 0.8rem;
       color: #666;
     }
     .sortable.asc::after {
       content: '\2191';
       opacity: 1;
       color: #0d47a1;
     }
     .sortable.desc::after {
       content: '\2193';
       opacity: 1;
       color: #0d47a1;
     }
    .table th {
      font-weight: 600;
      font-size: 0.85rem;
      text-transform: uppercase;
    }
    /* 筛选面板样式 */
    .card-header[role="button"] {
      cursor: pointer;
      transition: background-color 0.2s;
      padding: 0.75rem 1rem;
    }
    .card-header[role="button"]:hover {
      background-color: #e9ecef;
    }
    /* 表单控件样式 */
    .form-control, .form-select {
      font-size: 0.9rem;
      padding: 0.375rem 0.75rem;
      height: calc(1.9rem + 2px);
    }
    .form-label {
      font-size: 0.85rem;
      margin-bottom: 0.25rem;
      font-weight: 500;
    }
    .col-form-label {
      font-size: 0.85rem;
      font-weight: 500;
      padding-top: calc(0.375rem + 1px);
      padding-bottom: calc(0.375rem + 1px);
      text-align: right;
    }
    /* 筛选表单样式 */
    .card-body .row.align-items-center {
      margin: 0;
    }
    .card-body .form-control-sm, 
    .card-body .form-select-sm {
      height: calc(1.8rem + 2px);
      padding: 0.25rem 0.5rem;
    }
    /* 卡片样式 */
    .card {
      border: none;
      border-radius: 0.5rem;
      overflow: hidden;
    }
    .card-header {
      background-color: rgba(0,0,0,.03);
      border-bottom: 1px solid rgba(0,0,0,.125);
    }
    /* 删除功能样式 */
    /* 移动端左滑删除样式 */
    .record-row {
      position: relative;
      transition: transform 0.3s ease;
      overflow: hidden;
    }
    
    .delete-action {
      position: absolute;
      right: -80px;
      top: 50%;
      transform: translateY(-50%);
      height: 40px;
      width: 80px;
      background-color: #dc3545;
      color: white;
      display: flex !important;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 1.1rem;
      z-index: 10;
      border: none;
      outline: none;
      user-select: none;
      -webkit-user-select: none;
      -webkit-tap-highlight-color: transparent;
      box-sizing: border-box;
      border-radius: 4px;
    }
    
    .delete-action:hover {
      background-color: #c82333;
    }
    
    .delete-action:active {
      background-color: #bd2130;
      transform: scale(0.95);
    }
    
    /* 移动端特定样式 */
    @media (max-width: 768px) {
      .record-row {
        touch-action: pan-y;
      }
      
      .delete-action {
        font-size: 1.2rem;
        min-width: 60px;
        height: 36px;
      }
      
      /* 确保表格在移动端正确显示 */
      .table-responsive {
        -webkit-overflow-scrolling: touch;
      }
    }
    
    .delete-action:hover {
      background-color: #c82333;
    }
    
    /* 右键菜单样式 */
    .context-menu {
      position: fixed;
      background: white;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      z-index: 1000;
      min-width: 120px;
      display: none;
    }
    
    .context-menu-item {
      padding: 8px 16px;
      cursor: pointer;
      border-bottom: 1px solid #eee;
      transition: background-color 0.2s;
    }
    
    .context-menu-item:last-child {
      border-bottom: none;
    }
    
    .context-menu-item:hover {
      background-color: #f8f9fa;
    }
    
    .context-menu-item.delete {
      color: #dc3545;
    }
    
    .context-menu-item.delete:hover {
      background-color: #f8d7da;
    }
    
    /* 确认删除模态框样式 */
    .delete-confirm-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1050;
    }
    
    .delete-confirm-content {
      background: white;
      padding: 20px;
      border-radius: 8px;
      max-width: 400px;
      width: 90%;
      text-align: center;
    }
    
    /* 响应式调整 */
    @media (max-width: 768px) {
      .table {
        font-size: 0.8rem;
      }
      .table td, .table th {
        padding: 0.3rem 0.4rem;
        font-size: 0.8rem;
        line-height: 1.2;
      }
      .form-control, .form-select {
        font-size: 0.85rem;
        height: calc(1.8rem + 2px);
      }
      /* 竖屏模式优化 */
       .user-avatar {
         width: 28px;
         height: 28px;
         font-size: 12px;
       }
       .badge {
         font-size: 0.7rem;
         padding: 0.2rem 0.5rem;
       }
       /* 移动端用户列优化 */
       .table th:nth-child(1),
       .table td:nth-child(1) {
         width: 20px;
         min-width: 20px;
         text-align: left;
       }
       /* 移动端时间列优化 */
       .table th:nth-child(2),
       .table td:nth-child(2) {
         width: 40px;
         min-width: 40px;
       }
       /* 移动端订单号列优化 */
       .table th:nth-child(3),
       .table td:nth-child(3) {
         width: 120px;
         min-width: 120px;
       }
       /* 移动端数量列优化 */
       .table th:nth-child(4),
       .table td:nth-child(4) {
         width: 50px;
         min-width: 50px;
       }
       .time-date {
         font-size: 1em;
       }
       .time-clock {
         font-size: 0.85em;
       }
    }
    
    /* 横屏模式优化 */
    @media (orientation: landscape) {
      /* 增加日期输入框宽度 */
      input[type="date"].form-control {
        min-width: 140px;
        width: 100%;
      }
      /* 优化表单布局 */
      .col-form-label {
        padding-right: 5px;
        font-size: 0.8rem;
      }
      /* 确保下拉框不会导致布局问题 */
      select.form-select {
        padding-right: 25px;
      }
      /* 横屏模式下表格列宽度优化 */
       /* 用户列 - 调整宽度以适应两行显示 */
       .table th:nth-child(1),
       .table td:nth-child(1) {
         width: 160px;
         min-width: 160px;
         text-align: left;
       }
       /* 横屏模式下用户信息布局优化 */
        .table td:nth-child(1) .d-flex {
          flex-direction: row;
          align-items: center;
        }
        .table td:nth-child(1) .user-avatar {
          margin-right: 8px;
          margin-bottom: 0;
          flex-shrink: 0;
        }
        .table td:nth-child(1) > div > div > div {
          text-align: left;
          line-height: 1.3;
        }
        .table td:nth-child(1) small.text-muted {
          font-size: 0.75rem;
          line-height: 1.2;
          display: block;
        }
      /* 扫码时间列 - 增加宽度以适应单行显示 */
      .table th:nth-child(2),
      .table td:nth-child(2) {
        width: 160px;
        min-width: 160px;
      }
      /* 订单号列 - 增加宽度 */
      .table th:nth-child(3),
      .table td:nth-child(3) {
        width: 180px;
        min-width: 180px;
      }
    }
    .form-floating > .form-control-sm {
      height: calc(2.5rem + 2px);
      padding: 0.5rem 0.75rem;
    }
    .form-floating > label {
      padding: 0.5rem 0.75rem;
    }
    .table-responsive {
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    /* 表格样式优化 */
    .table {
      margin-bottom: 0;
    }
    .table-hover tbody tr:hover {
      background-color: rgba(0,123,255,0.05);
    }
    /* 响应式调整 */
    @media (max-width: 767.98px) {
      .admin-header h2 {
        font-size: 1.5rem;
      }
      .form-floating > .form-control-sm {
        height: calc(2.25rem + 2px);
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- 登录状态栏 -->
    <div class="login-status">
      <div class="row align-items-center">
        <div class="col-md-8">
          <% if (userInfo) { %>
            <span class="text-success">✓ 已登录</span> - 欢迎，<strong><%= userInfo.name %></strong>
<% if (userInfo.department && userInfo.department.length > 0) { %>
  (<%= Array.isArray(userInfo.department) ? userInfo.department.join(', ') : userInfo.department %>)
<% } %>
(<%= userInfo.userid %>)
          <% } else { %>
            <span class="text-danger">✗ 未登录</span>
          <% } %>
        </div>
        <div class="col-md-4 text-end">
          <% if (userInfo) { %>
            <a href="/" class="btn btn-outline-primary btn-sm me-2">返回首页</a>
            <a href="/logout" class="btn btn-outline-secondary btn-sm">退出登录</a>
          <% } else { %>
            <a href="/" class="btn btn-primary btn-sm">登录</a>
          <% } %>
        </div>
      </div>
    </div>

    <!-- 管理页面标题 -->
    <div class="admin-header">
      <h2 class="text-center">扫码记录管理</h2>
      <p class="text-center text-muted">查看和管理所有用户的扫码记录</p>
    </div>

    <!-- 筛选表单 (折叠面板) -->
    <div class="card mb-4 shadow-sm">
      <div class="card-header bg-light d-flex justify-content-between align-items-center" role="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="false" aria-controls="filterCollapse">
        <div>
          <i class="bi bi-funnel me-2"></i>
          <strong>筛选条件</strong>
          <% if (filters.userId || filters.startDate || filters.endDate || filters.orderNumber || filters.status) { %>
            <span class="badge bg-primary ms-2">已筛选</span>
          <% } %>
        </div>
        <i class="bi bi-chevron-down"></i>
      </div>
      <div class="collapse <%= (filters.userId || filters.startDate || filters.endDate || filters.orderNumber || filters.status) ? 'show' : '' %>" id="filterCollapse">
        <div class="card-body">
          <form action="/admin" method="get">
            <div class="row g-2">
              <div class="col-md-3 col-sm-6">
                <div class="mb-2 row align-items-center">
                  <label for="userId" class="col-3 col-form-label">用户ID</label>
                  <div class="col-9">
                    <select class="form-select form-select-sm" id="userId" name="userId">
                      <option value="">全部用户</option>
                      <% if (usersList && usersList.length > 0) { %>
                        <% usersList.forEach(function(user) { %>
                          <option value="<%= user.userid %>" <%= filters.userId === user.userid ? 'selected' : '' %>>
                            <%= user.name %> (<%= user.userid %>)
                          </option>
                        <% }); %>
                      <% } %>
                    </select>
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="mb-2 row align-items-center">
                  <label for="startDate" class="col-3 col-form-label">开始日期</label>
                  <div class="col-9">
                    <input type="date" class="form-control form-control-sm" id="startDate" name="startDate" value="<%= filters.startDate || '' %>">
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="mb-2 row align-items-center">
                  <label for="endDate" class="col-3 col-form-label">结束日期</label>
                  <div class="col-9">
                    <input type="date" class="form-control form-control-sm" id="endDate" name="endDate" value="<%= filters.endDate || '' %>">
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="mb-2 row align-items-center">
                  <label for="orderNumber" class="col-3 col-form-label">订单号</label>
                  <div class="col-9">
                    <input type="text" class="form-control form-control-sm" id="orderNumber" name="orderNumber" value="<%= filters.orderNumber || '' %>" list="orderNumberList" placeholder="输入或选择订单号">
                    <datalist id="orderNumberList">
                      <% if (ordersList && ordersList.length > 0) { %>
                        <% ordersList.forEach(function(order) { %>
                          <option value="<%= order.order_number %>">
                        <% }); %>
                      <% } %>
                    </datalist>
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="mb-2 row align-items-center">
                  <label for="status" class="col-3 col-form-label">状态</label>
                  <div class="col-9">
                    <select class="form-select form-select-sm" id="status" name="status">
                      <option value="">全部状态</option>
                      <option value="success" <%= (filters.status === 'success' || (!filters.status && !Object.keys(filters).some(key => filters[key]))) ? 'selected' : '' %>>成功</option>
                      <option value="failed" <%= filters.status === 'failed' ? 'selected' : '' %>>失败</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex justify-content-end mt-2">
              <a href="/admin" class="btn btn-outline-secondary btn-sm me-2">
                <i class="bi bi-arrow-counterclockwise me-1"></i>重置
              </a>
              <button type="submit" class="btn btn-primary btn-sm">
                <i class="bi bi-search me-1"></i>筛选
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- 扫码记录表格 -->
    <div class="table-responsive mt-3">
      <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
          <i class="bi bi-table me-2"></i>
          <strong>扫码记录列表</strong>
          <% if (records && records.length > 0) { %>
            <span class="badge bg-secondary ms-2"><%= records.length %> 条记录</span>
          <% } %>
        </div>
      </div>
      <table class="table table-striped table-hover">
        <thead class="table-dark">
          <tr>
            <th class="sortable" data-column="user">用户</th>
            <th class="sortable" data-column="position">岗位</th>
            <th class="sortable" data-column="time">扫码时间</th>
            <th class="sortable" data-column="order">订单号</th>
            <th class="sortable" data-column="quantity">数量</th>
            <th class="sortable" data-column="status">状态</th>
          </tr>
        </thead>
        <tbody>
          <% if (records && records.length > 0) { %>
            <% records.forEach(record => { %>
              <tr class="record-row" data-record-id="<%= record.id %>" data-user-id="<%= record.userid %>" data-scan-time="<%= record.scan_time %>">
                <td>
                  <div class="d-flex align-items-center">
                    <% if (record.user && record.user.name) { %>
                      <div class="user-avatar bg-secondary d-flex align-items-center justify-content-center me-2">
                        <span class="text-white"><%= record.user.name.charAt(0) %></span>
                      </div>
                      <div>
                        <div><%= record.user.name %></div>
                        <small class="text-muted"><%= record.userid %></small>
                      </div>
                    <% } else { %>
                      <small class="text-muted"><%= record.userid %></small>
                    <% } %>
                  </div>
                </td>
                <td>
                  <% if (record.user && record.user.description) { %>
                    <%= record.user.description %>
                  <% } else { %>
                    <span class="text-muted">-</span>
                  <% } %>
                </td>
                <td>
                  <div class="time-display">
                    <div class="time-date"><%= new Date(record.scan_time).toLocaleDateString('zh-CN') %></div>
                    <div class="time-clock"><%= new Date(record.scan_time).toLocaleTimeString('zh-CN', {hour12: false}) %></div>
                  </div>
                </td>
                <td><%= record.scan_result %></td>
                <td>
                  <% if (record.quantity && record.quantity > 0) { %>
                    <%= record.quantity %>
                  <% } else { %>
                    <span class="text-muted">-</span>
                  <% } %>
                </td>
                <td>
                  <% if (record.status === '成功' || record.status === 'success') { %>
                    <span class="badge bg-success rounded-pill"><i class="bi bi-check-circle me-1"></i>成功</span>
                  <% } else if (record.status === '失败' || record.status === 'failed') { %>
                    <span class="badge bg-danger rounded-pill"><i class="bi bi-x-circle me-1"></i>失败</span>
                  <% } else { %>
                    <span class="badge bg-warning text-dark rounded-pill"><i class="bi bi-question-circle me-1"></i><%= record.status %></span>
                  <% } %>
                </td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr>
              <td colspan="6" class="text-center py-4">暂无扫码记录</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- 右键菜单 -->
    <div class="context-menu" id="contextMenu">
      <div class="context-menu-item delete" onclick="confirmDelete()">
        <i class="bi bi-trash me-2"></i>删除记录
      </div>
    </div>

    <!-- 确认删除模态框 -->
    <div class="delete-confirm-modal" id="deleteConfirmModal">
      <div class="delete-confirm-content">
        <h5 class="mb-3">确认删除</h5>
        <p class="mb-4">确定要删除这条扫码记录吗？此操作不可撤销。</p>
        <div class="d-flex justify-content-center gap-2">
          <button type="button" class="btn btn-secondary" onclick="cancelDelete()">取消</button>
          <button type="button" class="btn btn-danger" onclick="executeDelete()">删除</button>
        </div>
      </div>
    </div>

    <!-- 分页导航 -->
    <% if (totalPages > 1) { %>
      <div class="mt-3">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <small class="text-muted">共 <%= totalRecords %> 条记录，<%= totalPages %> 页</small>
        </div>
        <nav aria-label="Page navigation">
          <ul class="pagination justify-content-center">
            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
              <a class="page-link" href="/admin?page=<%= currentPage - 1 %><%= queryParams %>" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
              </a>
            </li>
            <% for(let i = startPage; i <= endPage; i++) { %>
              <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                <a class="page-link" href="/admin?page=<%= i %><%= queryParams %>"><%= i %></a>
              </li>
            <% } %>
            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
              <a class="page-link" href="/admin?page=<%= currentPage + 1 %><%= queryParams %>" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    <% } %>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    /**
     * 表格排序功能
     * 支持按用户、时间、订单号、数量、状态进行排序
     */
    document.addEventListener('DOMContentLoaded', function() {
      const table = document.querySelector('.table');
      const tbody = table.querySelector('tbody');
      const headers = table.querySelectorAll('.sortable');
      let currentSort = { column: null, direction: 'asc' };

      headers.forEach(header => {
        header.addEventListener('click', function() {
          const column = this.dataset.column;
          
          // 重置其他列的排序状态
          headers.forEach(h => {
            if (h !== this) {
              h.classList.remove('asc', 'desc');
            }
          });

          // 确定排序方向
          if (currentSort.column === column) {
            currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
          } else {
            currentSort.direction = 'asc';
          }
          currentSort.column = column;

          // 更新视觉状态
          this.classList.remove('asc', 'desc');
          this.classList.add(currentSort.direction);

          // 执行排序
          sortTable(column, currentSort.direction);
        });
      });

      /**
       * 表格排序函数
       * @param {string} column - 排序列
       * @param {string} direction - 排序方向 (asc/desc)
       */
      function sortTable(column, direction) {
        const rows = Array.from(tbody.querySelectorAll('tr'));
        
        // 过滤掉"暂无记录"行
        const dataRows = rows.filter(row => !row.querySelector('td[colspan]'));
        
        if (dataRows.length === 0) return;

        dataRows.sort((a, b) => {
          let aVal, bVal;

          switch (column) {
            case 'user':
              aVal = a.cells[0].textContent.trim().toLowerCase();
              bVal = b.cells[0].textContent.trim().toLowerCase();
              break;
            case 'time':
              aVal = new Date(a.cells[1].textContent.trim());
              bVal = new Date(b.cells[1].textContent.trim());
              break;
            case 'order':
              aVal = a.cells[2].textContent.trim().toLowerCase();
              bVal = b.cells[2].textContent.trim().toLowerCase();
              break;
            case 'quantity':
              aVal = parseInt(a.cells[3].textContent.trim()) || 0;
              bVal = parseInt(b.cells[3].textContent.trim()) || 0;
              break;
            case 'status':
              const statusOrder = { '成功': 1, 'success': 1, '失败': 2, 'failed': 2 };
              aVal = statusOrder[a.cells[4].textContent.trim()] || 3;
              bVal = statusOrder[b.cells[4].textContent.trim()] || 3;
              break;
            default:
              return 0;
          }

          if (aVal < bVal) return direction === 'asc' ? -1 : 1;
          if (aVal > bVal) return direction === 'asc' ? 1 : -1;
          return 0;
        });

        // 重新插入排序后的行
        dataRows.forEach(row => tbody.appendChild(row));
        
        // 如果有"暂无记录"行，保持在最后
        const emptyRow = rows.find(row => row.querySelector('td[colspan]'));
        if (emptyRow) {
          tbody.appendChild(emptyRow);
        }
      }

      /**
       * 删除功能实现
       */
      let currentDeleteRecord = null;
      let touchStartX = 0;
      let touchStartY = 0;
      let isSwiping = false;

      // 移动端触摸事件处理
      const recordRows = document.querySelectorAll('.record-row');
      recordRows.forEach(row => {
        // 触摸开始
        row.addEventListener('touchstart', function(e) {
          touchStartX = e.touches[0].clientX;
          touchStartY = e.touches[0].clientY;
          isSwiping = false;
        });

        // 触摸移动
        row.addEventListener('touchmove', function(e) {
          if (!touchStartX) return;
          
          const touchX = e.touches[0].clientX;
          const touchY = e.touches[0].clientY;
          const deltaX = touchStartX - touchX;
          const deltaY = Math.abs(touchStartY - touchY);
          
          // 判断是否为水平滑动（降低阈值，增加灵敏度）
          if (Math.abs(deltaX) > 10 && deltaY < 50) {
            isSwiping = true;
            e.preventDefault();
            
            if (deltaX > 10) { // 左滑
              // 先恢复其他行的状态
              recordRows.forEach(r => {
                if (r !== this) {
                  r.classList.remove('swiping');
                  r.style.transform = ''; // 重置位置
                  const existingBtn = r.querySelector('.delete-action');
                  if (existingBtn) existingBtn.remove();
                }
              });
              
              this.classList.add('swiping');
              // 添加删除按钮
              if (!this.querySelector('.delete-action')) {
                const deleteBtn = document.createElement('div');
                deleteBtn.className = 'delete-action';
                deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
                
                // 根据屏幕宽度调整按钮宽度
                const isMobile = window.innerWidth <= 768;
                const btnWidth = isMobile ? 60 : 80;
                deleteBtn.style.width = btnWidth + 'px';
                deleteBtn.style.right = '-' + btnWidth + 'px';
                deleteBtn.style.display = 'flex';
                
                deleteBtn.onclick = (event) => {
                  event.stopPropagation();
                  currentDeleteRecord = {
                    id: this.dataset.recordId,
                    userId: this.dataset.userId,
                    scanTime: this.dataset.scanTime
                  };
                  showDeleteConfirm();
                };
                // 将删除按钮添加到最后一个td元素中，而不是tr中
                const lastCell = this.cells[this.cells.length - 1];
                lastCell.style.position = 'relative';
                lastCell.appendChild(deleteBtn);
                
                // 调整行的滑动距离
                this.style.transform = `translateX(-${btnWidth}px)`;
                console.log('删除按钮已添加，宽度:', btnWidth); // 调试信息
              }
            } else if (deltaX < -10) { // 右滑，恢复原状
              this.classList.remove('swiping');
              this.style.transform = '';
              const deleteBtn = this.querySelector('.delete-action');
              if (deleteBtn) {
                deleteBtn.remove();
                console.log('删除按钮已移除'); // 调试信息
              }
            }
          }
        });

        // 触摸结束
        row.addEventListener('touchend', function(e) {
          touchStartX = 0;
          touchStartY = 0;
          
          // 如果不是滑动，恢复其他行的状态
          if (!isSwiping) {
            recordRows.forEach(r => {
              if (r !== this) {
                r.classList.remove('swiping');
                r.style.transform = '';
                const deleteBtn = r.querySelector('.delete-action');
                if (deleteBtn) deleteBtn.remove();
              }
            });
          }
          
          // 重置滑动状态
          setTimeout(() => {
            isSwiping = false;
          }, 100);
        });

        // 桌面端右键菜单
        row.addEventListener('contextmenu', function(e) {
          e.preventDefault();
          currentDeleteRecord = {
            id: this.dataset.recordId,
            userId: this.dataset.userId,
            scanTime: this.dataset.scanTime
          };
          showContextMenu(e.clientX, e.clientY);
        });
      });

      // 点击其他地方隐藏右键菜单和左滑状态
      document.addEventListener('click', function(e) {
        const contextMenu = document.getElementById('contextMenu');
        // 如果点击的不是右键菜单内的元素，则隐藏菜单
        if (!contextMenu.contains(e.target) && !e.target.closest('.context-menu')) {
          hideContextMenu();
        }
        
        // 恢复所有行的左滑状态
        if (!e.target.closest('.record-row') && !e.target.closest('.delete-action')) {
          recordRows.forEach(row => {
            row.classList.remove('swiping');
            row.style.transform = '';
            const deleteBtn = row.querySelector('.delete-action');
            if (deleteBtn) deleteBtn.remove();
          });
        }
      });

      // 阻止右键菜单的点击事件冒泡
      document.getElementById('contextMenu').addEventListener('click', function(e) {
        e.stopPropagation();
      });

      /**
       * 显示右键菜单
       * @param {number} x - 鼠标X坐标
       * @param {number} y - 鼠标Y坐标
       */
      function showContextMenu(x, y) {
        const contextMenu = document.getElementById('contextMenu');
        
        // 先显示菜单以获取其尺寸
        contextMenu.style.display = 'block';
        contextMenu.style.visibility = 'hidden';
        
        const menuRect = contextMenu.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        
        // 计算菜单位置，确保不超出视窗边界
        let menuX = x;
        let menuY = y;
        
        // 检查右边界
        if (x + menuRect.width > viewportWidth) {
          menuX = viewportWidth - menuRect.width - 10;
        }
        
        // 检查下边界
        if (y + menuRect.height > viewportHeight) {
          menuY = viewportHeight - menuRect.height - 10;
        }
        
        // 确保不超出左上边界
        menuX = Math.max(10, menuX);
        menuY = Math.max(10, menuY);
        
        // 设置最终位置并显示
        contextMenu.style.left = menuX + 'px';
        contextMenu.style.top = menuY + 'px';
        contextMenu.style.visibility = 'visible';
      }

      /**
       * 隐藏右键菜单
       */
      function hideContextMenu() {
        const contextMenu = document.getElementById('contextMenu');
        contextMenu.style.display = 'none';
      }

      /**
       * 显示删除确认对话框
       */
      function showDeleteConfirm() {
        hideContextMenu();
        const modal = document.getElementById('deleteConfirmModal');
        modal.style.display = 'flex';
      }

      /**
       * 确认删除（从右键菜单调用）
       */
      window.confirmDelete = function() {
        showDeleteConfirm();
      }

      /**
       * 取消删除
       */
      window.cancelDelete = function() {
        const modal = document.getElementById('deleteConfirmModal');
        modal.style.display = 'none';
        currentDeleteRecord = null;
      }

      /**
       * 执行删除操作
       */
      window.executeDelete = async function() {
        if (!currentDeleteRecord) return;
        
        try {
          const response = await fetch('/admin/delete-record', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              recordId: currentDeleteRecord.id,
              userId: currentDeleteRecord.userId,
              scanTime: currentDeleteRecord.scanTime
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // 删除成功，刷新页面或移除行
            const row = document.querySelector(`[data-record-id="${currentDeleteRecord.id}"]`);
            if (row) {
              row.style.transition = 'opacity 0.3s ease';
              row.style.opacity = '0';
              setTimeout(() => {
                row.remove();
                // 如果没有记录了，显示空状态
                const tbody = document.querySelector('tbody');
                if (tbody.children.length === 0) {
                  tbody.innerHTML = '<tr><td colspan="5" class="text-center py-4">暂无扫码记录</td></tr>';
                }
              }, 300);
            }
            
            // 显示成功提示
            showToast('记录删除成功', 'success');
          } else {
            showToast(result.message || '删除失败', 'error');
          }
        } catch (error) {
          console.error('删除记录失败:', error);
          showToast('删除失败，请重试', 'error');
        }
        
        // 关闭模态框
        cancelDelete();
      }

      /**
       * 显示提示消息
       * @param {string} message - 提示消息
       * @param {string} type - 消息类型 (success/error)
       */
      function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 1060; min-width: 250px;';
        toast.innerHTML = `
          <div class="d-flex align-items-center">
            <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
            ${message}
          </div>
        `;
        
        document.body.appendChild(toast);
        
        // 3秒后自动移除
        setTimeout(() => {
          toast.style.transition = 'opacity 0.3s ease';
          toast.style.opacity = '0';
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
    });
  </script>
</body>
</html>